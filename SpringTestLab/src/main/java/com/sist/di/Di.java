package com.sist.di;
/*
 * #디자인패턴 
 * 	1. 개념 : 재사용하기 좋은 형태로 특정 규약을 묶어서 정리한 것
 * 	
 *  2. 사용 이유
 * 		1) 요구 사항이 수시로 변경 ==> Source Code 변경을 최소화
 * 		2) 여러사람이 팀 프로젝트를 진행 ==> 범용적인 코딩 스타일을 적용
 * 
 * #프레임워크 
 * 	1. 개념 
 * 		- 비기능적 요구사항(보안, 안정성, 성능 등)을  만족하는 구조의 라이브러리 덩어리
 * 		- 구현된 기능을 안정적으로 실행되도록 제어해주는 잘 만들어진 라이브러리 덩어리
 *  		==> 프레임워크는 하부구조를 제공함으로써 개발자들로 하여금 
 *              시스템 하부구조를 구현하는데 들어가는 노력 절감하도록 도와줌
 *  2. 사용이유	
 * 		- 비기능적 요소들을 초기 개발단계마다 구현해야하는 불리함을 극복해줌
 * 		- 기능적인(Functional)요구 사항에 집중할 수 있도록 해줌
 *      - 디자인패턴, 반복적으로 발견되는 문제를 해결하기 위해 특화된 Solution을 제공
 *  
 *  ==> 프레임워크는 디자인 패턴과 함께 패턴이 적용된 기반 클래스 라이브러리를 제공
 *  ==> 구조적인 틀과 구현코들르 함께 제공함
 *  
 * #개발자
 * 	- 프레임워크의 기반코드를 확장하여 사용
 * 	- 자연스럽게 해당 프레임워크에서 사용된 패턴을 적용할 수 있게 됨
 *  
 */
/*
 * #IoC(Inversion of Control)
 * 	1. 개념 
 * 		- 직역 : 제어의 역전
 * 		- 인스턴스 생성부터 소멸까지의 인스턴스 생명주기 관리를 개발자가 아닌 
 * 		     컨테이너(프레임워크)가 대신 해준다는 뜻
 *      - 컨테이너의 역할을 프레임워크에게 제어하는 권한을 넘겨서 
 *        개발자의 코드가 신경써야하는 부분을 줄이는 전략
 * 		- 프레임워크의 동작원리를 제어흐름이 일반적인 흐름과 반대로 동작함으로 IoC라고 함
 * 		- 스프링컨테이너는 IoC를 지원하며, 메타데이터(XML 설정)을 통해 beans를 관리하고
 * 		    어플리케이션의 중료한 부분을 형성함.
 *      - Spring 컨테이너는 관리되는 beans들을 의존성 주입(Di: Dependency Injection)을
 *        통해 IoC를 지원함.
 * 
 */
/*
 * #클래스 라이브러리(Class Library) 
 * 	1. 개념
 * 		- 프레임워크의 정의중 하나인 "Semi Complete(반제품)"임
 * 		- 프레임워크는 특정 부분의 기술적인 구현을 라이브러리형태로 제공, 
 * 		    즉, 라이브러리는 프레임워크의 한 구성 요소
 * 
 *  특징				프레임워크				라이브러리
 *  유저코드 작성	  프레임워크 클래스를                    독립적으로 작성
 *               서브클래싱해서 작성		
 *  호출 흐름		   프레임워크코드가	           유저가 라이브러리 호출 
 *                유저코드를 호출
 *  실행흐름		   프레임워크가 제어		      유저코드가 제어
 *  객체의 연동		   프레임워크가 정의	               독자적으로 정의 
 *  
 *  #디자인패턴 + 라이브러리 = 프레임워크 
 */
/*
 * 프레임워크의 종류
 * 		기능 									프레임워크 종류
 * 		웹(MVC) 								Spring MVC, Struts2, PlayFramwork
 * 		OR(Object-Relational) 매핑			Mybatis, Hibernate, JPA, Spring JDBC
 * 		AOP(Aspect Oriented Programming)	Spring AOP, JBoss AOP
 * 		DI(Dependency Injection) 			Spring DI....
 * 		Build와 Library 관리					Ant, Maven, Gradle.....
 * 		JavaScript							jQuery, AngularJS, node.js....
 * 		
 */
public class Di {

}
