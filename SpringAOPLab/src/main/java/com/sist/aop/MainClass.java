package com.sist.aop;
/*
 * #AOP (Aspect Oriented Programming)
 * 	1. 핵심 기능과 부가 기능
 * 		1) 핵심기능(Core Conerns) 
 * 			: 업무(Biz) 로직을 포함하는 기능
 * 		2) 부가기능(Cross-cutting Concerns) 
 * 			: 핵심기능을 도와주는 부가적인 기능(로깅, 보안 등)
 * 		
 * 		==> 기존의 Application에서는 oop의 기본원칙을 적용하여도
 * 			핵심기능에서 부가 기능을 분리, 모듈화 하는 것이 어려움
 *		==> 이를 보완하기 위해 탄생한 것이 AOP
 *
 *	2. AOP 개요
 *		1) 개념
 *			- 어플리케이션의 관심사의 분리 (기능의 분리)
 *			    즉, 핵심적인 기능에서 부가적인 기능을 분리함.
 *			- 분리한 부가기능을 애스팩트(Aspect)라는 독특한  모듈 형태로 만들어서
 *			    설계하고 개발하는 방법
 *
 *		2) 역할
 *			- AOP는 부가기능을 애스팩트로 정의하여, 핵심기능에서 부가기능을 분리함
 *			    핵심기능을 설계, 구현할 때, 객체지향적인 가치를 지킬 수 있게 도와줌
 *		
 *	3. AOP 용어
 *		1) 애스팩트(Aspect)
 *			- Aspect = Advice(어드바이스 : 부가기능을 정의한 코드) 
 *						+ PointCut(포인트 컷 : 어드바이스를 어디에 적용할지 결정하는 것) 	
 *		  	- 핵심기능 코드 사이에 침투된 부가기능을 독립적인 애스팩트로 구분해 낼 수 있음
 *			- 구분된 부가기능 애스팩트를 런타임시에 필요한 위치에 동적으로 참여할 수 있음
 *			- AOP의 기본 모듈
 *			- Aspect는 싱글톤 형태의 객체로 존재함
 *		
 *		2) 타겟(Target)
 *			- 핵심 기능을 담고 있는 모듈
 *			- 타겟은 부가기능을 부여할 대상이 됨
 *		
 *		3) 어드바이스(advice)
 *			- 어드바이스는 타겟에 제공할 부가기능을 담고 있는 모듈
 *		
 *		4) 조인 포인트(Join Point)
 *			- 어드바이스가 적용될 수 있는 위치를 말함
 *			- 즉, 타겟객체가 구현한 인터페이스의 모든 메서드는 조인 포인드가 됨
 *
 *		5) 포인트 컷(PointCut)
 *			- 어드바이스를 적용할 타겟의 메서드를  선별하는 정규 표현식		 
 *			- 즉, 포인트 컷 표현식은 execution으로 시작하고, 
 *			    매서드의 Signature를 비교하는 방법을 주로 이용함
 *				
 */
public class MainClass {

}
